<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- 配置视图解析器 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	<!-- 如果我们想要使用注解来开发 mvc 程序也就是说 handler 的话，那么我们就配置下面的这个注解驱动就可以了
		有了这个注解驱动，我们就可以在 handler 方法上面直接使用  @RequestMapping()配置handler映射地址
		
		下面是需要配置参数转换器的时候，才添加  conversion-service 属性-->
		<mvc:annotation-driven conversion-service="conversionService" />
	
	<!-- <mvc:annotation-driven/> -->
	
	<!-- 配置参数转换服务工厂，里面可以配置多个参数的转换器-->
	<bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
		<property name="converters">
			<set>
				<bean class="cn.itcast.converter.DateConverter"/>
			</set>
		</property>
	</bean>
	 
	 
	 <!-- 使用下面的这个配置以后， handler 类就不需在 spring 容器配置 bean， 直接在类上面添加 @controller 即可
		如果需要扫描多个包的话，那么可以使用通配符！！  
		【注意】 只需要扫描 controller 层的类上面的注解，service/dao 层的由 applicationContext.xml 去扫描
		其实， springmvc 容器是spring 容器里面的一个小容器，这两个容器还是有一些区别的。
	 -->
	<context:component-scan base-package="cn.itcast" use-default-filters="false"> 
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	
	<!-- 配置全局的异常解析器 
	<bean class="cn.itcast.ssm.exception.MyExceptionResolver"/>
	-->
	
	<!-- 配置静态资源
		如果我们把 DispatcherServlet 的 url-pattern 设置成  / 的话，则必须配置下面的静态资源 -->
	 <mvc:default-servlet-handler/>
	 
	 
	 <!-- 这个可以让 /web-inf 路径下的某些资源直接通用 url 路径进行访问
	 		path : 访问的 url 路径
	 		view-name: 其实就是指资源的真实路径，但是注意了，如果我们前面的viewResolver 已经设置前缀和后缀的话
			 		         那么这里就直接写资源名就可以了，就像在 handler 里面一样
		【注意】 这个配置一定一定要跟 <mvc:annotation-driven/>  一起使用，不然会出现错误 
			   这个配置还需要我们把  DispatcherServlet 的url-pattern 设置成  /
	  -->
	 <mvc:view-controller path="/toResult" view-name="result"/>
	 
	<!-- 配置校验信息文件对象
		  文件默认的位置在类路径下，所以不需要在前面添加 classpath
		 文件的默认后缀是  .properties ，所以我们也不需要写    i18n.properties
	 -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<!-- 如果只有一个配置文件，那么我们就使用 basename 参数就可以了
			 如果有多个 properties 文件的话，那么我们就需要使用  basenames 参数，
			 然后添加一个 <array> 或者 <list> 子标签
		 -->
		<property name="basenames">
			<array>
				<value>validationMessage</value>
				<value>language</value>
			</array>
		</property>
		<property name="defaultEncoding" value="utf-8"></property>
	</bean>
	
	<!-- 配置 LocaleResolver ，我们打算把 locale 参数保存在 session，所以配置的是 SessionLocaleResolver  -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver"/>

	<mvc:interceptors>
		<!-- 设置获取 Locale 参数的拦截器，用于支持国际化  -->
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
			<!-- 设置语言参数名，如果我们不设置的话，默认是  locale -->
			<property name="paramName" value="lang"/>
		</bean>
		<bean class="cn.itcast.interceptor.MyInterceptor"></bean>
	</mvc:interceptors>
	
	<!-- 配置 SimpleMappingExceptionResolver -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<!-- 设置指定异常类型要跳转到哪一个页面 -->
		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.ArrayIndexOutOfBoundsException">exceptionPage</prop>
			</props>
		</property>
		
		<!-- 设置保存异常对象对应的 key 值, 如果不设置的话，默认是使用exception
		     也就是说，我们可以在 jsp 页面上面通过   ${requestScope.exception } 获取到异常信息
		    当然，这里设置了以后，就需要使用   ${requestScope.error }  去获取了
		 -->
		<property name="exceptionAttribute" value="error"></property>
	</bean>
</beans>
